declare class Apis {
    private token;
    private baseURL;
    private headers;
    /**
     * @param token - The token that is used for authentication.
     */
    constructor(token: string);
    getMe(): Promise<any>;
    getUser(tag: string): Promise<any>;
    getPhoto(photoId: string): Promise<any>;
    sendMessage(dialogId: number, text: string, replyToId?: number | null, photos_list?: any[] | null, attachments?: any[] | null, edit?: number | null, repost?: any | null): Promise<any>;
    deleteMessage(ID: number): Promise<any>;
    subscribeToEvents(category: string, thing_id: number): Promise<any>;
    login(email: string, password: string): Promise<any>;
    register(name: string, email: string, password: string, surname?: string): Promise<any>;
    confirm(code: string, h_captcha_response: string): Promise<any>;
    resetPassword(email: string): Promise<any>;
    deleteAccount(): Promise<any>;
    restoreAccount(): Promise<any>;
    activatePromo(promo: string): Promise<any>;
    getUserTokens(): Promise<any>;
    getMessages(dialogId: number, last_id: number): Promise<any>;
    getDialogs(): Promise<any>;
    createDialog(name: string, description: string, type: string): Promise<any>;
    getDialogMembers(dialogId: number, last_id?: number): Promise<any>;
    joinDialog(dialogId: number, userId: number): Promise<any>;
    leaveDialog(dialogId: number, userId: number): Promise<any>;
    uploadPhoto(caption: string, photo: File, mode?: string): Promise<any>;
    deletePhoto(photoId: number): Promise<any>;
    getUserPhotos(tag: string, page: number, mode?: number): Promise<any>;
    getTrack(trackId: number): Promise<any>;
    uploadTrack(name: string, authorName: string, release: string, audio: File, cover?: number, mode?: string): Promise<any>;
    createPlaylist(name: string, release: string, description: string, cover: number): Promise<any>;
    deletePlaylist(playlistId: number): Promise<any>;
    updatePlaylist(playlistId: number, name: string, release: string, description: string, cover: number): Promise<any>;
    addPlaylistTrack(playlistId: number, trackId: number): Promise<any>;
    deletePlaylistTrack(playlistId: number, trackId: number): Promise<any>;
    getPlaylist(playlistId: number): Promise<any>;
    getUserPlaylists(tag: string): Promise<any>;
    getPosts(tag: string, lastId: number, lang?: string, feed?: boolean): Promise<any>;
    uploadPost(tag: string, content: string, lang?: number, photos?: any[], nsfw?: number, edit?: number, repost?: number): Promise<any>;
    deletePost(postId: number): Promise<any>;
    editPost(postId: number, content: string): Promise<any>;
    getComments(postId: number, lastId: number): Promise<any>;
    uploadComment(postId: number, content: string, photos?: any[]): Promise<any>;
    deleteComment(commentId: number): Promise<any>;
    getNotifications(page?: number): Promise<any>;
    getNotification(notificationId: number): Promise<any>;
    getCountries(): Promise<any>;
    getRegions(countryId: number): Promise<any>;
    getCities(countryId: number, regionId: number): Promise<any>;
    getLanguages(): Promise<any>;
    getUserPages(): Promise<any>;
    createPage(name: string, url: string, icon: string): Promise<any>;
    updatePage(pageTag: string, name: string, url: string, icon: string): Promise<any>;
    deletePage(pageTag: string): Promise<any>;
    getGdvsAccounts(): Promise<any>;
    getArticle(articleId: number): Promise<any>;
    getArticleRevision(revisionId: number): Promise<any>;
    getFriends(tag: string, page: number): Promise<any>;
    getIncomingRequests(page: number): Promise<any>;
    getOutcomingRequests(page: number): Promise<any>;
    ignoreIncomingRequest(userId: number): Promise<any>;
    getRelationships(tag: string): Promise<any>;
    subscribeFriends(tag: string): Promise<any>;
    getUserApps(): Promise<any>;
    createApp(name: string, redirectUrl: string): Promise<any>;
    deleteApp(appId: number): Promise<any>;
    getUserAppTokens(): Promise<any>;
    createUserAppToken(publicKey: string, redirectUrl: string): Promise<any>;
    deleteUserAppToken(appToken: string, publicKey: string, redirectUrl: string): Promise<any>;
    getApp(publicKey: string, redirectUrl: string): Promise<any>;
    getUserAppToken(publicKey: string, redirectUrl: string): Promise<any>;
    logout(): Promise<any>;
}
export default Apis;
